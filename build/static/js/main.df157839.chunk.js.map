{"version":3,"sources":["observable.ts","api.ts","SignalScopeChart.tsx","App.tsx","index.tsx"],"names":["Observable","init","onChange","state","callbacks","this","useState","setState","indexOf","useEffect","deRegister","set","bind","cb","push","splice","Api","ws","waitingOnButton","sendPhotoFunc","imuQuaternionData","imuDataFrame","Math","floor","Date","now","error","frame","onmessage","a","data","onMsg","JSON","parse","msg","cmd","button","sendPhoto","send","close","Error","Blob","stringify","WS_URL","document","domain","window","location","port","SignalScopeChart","scope","containerRef","useRef","chartRef","VEGA_CAT_10_COLORS","container","current","setData","uplot","uPlot","width","height","series","labels","map","label","i","stroke","length","points","show","axes","labelSize","grid","ticks","size","values","parent","unwrap","parentElement","ResizeObserver","setSize","offsetWidth","offsetHeight","observe","ref","MainUI","api","videoRef","canvasRef","waitingForButton","setWaitingForButton","showImuData","setShowImuData","showMenu","setShowMenu","useCallback","canvas","video","w","videoWidth","h","videoHeight","ctx","getContext","drawImage","img","getImageData","filter","_","idx","Uint16Array","navigator","mediaDevices","getUserMedia","min","ideal","max","srcObject","onloadeddata","sensors","accelerometer","Accelerometer","gyroscope","Gyroscope","magnetometer","Magnetometer","name","SensorClass","permissions","query","sensor","frequency","addEventListener","event","console","x","y","z","start","Object","entries","onDeviceOrientation","alpha","beta","gamma","time","cutoffTime","cutoffIdx","findIndex","t","RAD","PI","q","Quaternion","fromEuler","slice","quaternion","removeEventListener","style","position","display","autoPlay","maxWidth","maxHeight","margin","top","flexDirection","justifyContent","alignItems","color","background","borderRadius","styles","keepLastSecs","Button","variant","fontSize","onClick","Modal","onHide","Header","closeButton","Title","Body","checked","alignSelf","disabled","App","setApi","WebSocket","onopen","onclose","onerror","e","useApi","ReactDOM","render","fallbackRender","resetErrorBoundary","Alert","toString","Link","getElementById"],"mappings":"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","file":"static/js/main.df157839.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\ntype Callback<T> = (state: T) => void;\n\n// something neat I came up with - similar to https://github.com/pmndrs/valtio\nexport class Observable<T> {\n  state: T;\n  callbacks: Callback<T>[];\n\n  constructor(init: T, onChange: Callback<T> | null = null) {\n    this.state = init;\n    this.callbacks = onChange ? [onChange] : [];\n  }\n\n  // register with react lifecycle\n  useState(): [T, (state: T) => void] {\n    const [state, setState] = useState<T>(this.state); // eslint-disable-line\n\n    // this would usually be in the useEffect below, but for compatability with the\n    // component lifecycle we need this to be called here\n    if (this.callbacks.indexOf(setState) === -1) {\n      this.onChange(setState);\n    }\n\n    // eslint-disable-next-line\n    useEffect(() => {\n      return () => this.deRegister(setState);\n    }, []);\n\n    return [state, this.set.bind(this)];\n  }\n\n  onChange(cb: Callback<T>) {\n    this.callbacks.push(cb);\n  }\n\n  deRegister(cb: Callback<T>) {\n    this.callbacks.splice(this.callbacks.indexOf(cb), 1);\n  }\n\n  set(state: T) {\n    this.state = state;\n    for (const cb of this.callbacks) {\n      cb(state);\n    }\n  }\n}\n","import { useState, useEffect } from \"react\";\nimport { Observable } from \"./observable\";\n\ntype CameraGrabApiMsg = {\n  cmd: \"grab\";\n  cam: string;\n  button: boolean;\n  wait: number | null;\n};\n\ntype ImuApiMsg = {\n  cmd: \"imu\";\n  wait: number | null;\n};\n\ntype ServerDisconnectMsg = {\n  cmd: \"disconnect\"; // occurs when a second client attempts to connect - switches to newest\n};\n\ntype ApiMsg = CameraGrabApiMsg | ImuApiMsg | ServerDisconnectMsg;\n\ntype ImuDataFrame = {\n  error?: string;\n  accelerometer?: [x: number, y: number, z: number];\n  gyroscope?: [x: number, y: number, z: number];\n  magnetometer?: [x: number, y: number, z: number];\n  quaternion?: [x: number, y: number, z: number, w: number];\n};\n\nexport class Api {\n  waitingOnButton: Observable<boolean>;\n  sendPhotoFunc: Observable<(() => void) | null>;\n  imuQuaternionData: Observable<number[][]>;\n  imuDataFrame: Observable<ImuDataFrame>;\n\n  private ws: WebSocket;\n\n  // can't just use \"/ws\". WebSocket constructor won't accept it.\n  static WS_URL =\n    \"wss://\" + document.domain + \":\" + window.location.port + \"/ws\";\n\n  constructor(ws: WebSocket) {\n    this.ws = ws;\n    this.waitingOnButton = new Observable(false as boolean);\n    this.sendPhotoFunc = new Observable(null as any);\n    this.imuQuaternionData = new Observable([\n      [Math.floor(Date.now() / 1000)],\n      [0],\n      [0],\n      [0],\n    ]);\n    this.imuDataFrame = new Observable(\n      {\n        error:\n          \"No IMU data is available. The device either does not support IMU data or has not been given permission.\",\n      } as ImuDataFrame,\n      (frame) => {\n        // If we received any new data, the error above is invalid. clear it.\n        if (\"error\" in frame) {\n          delete frame[\"error\"];\n        }\n      }\n    );\n\n    ws.onmessage = async ({ data }: { data: string }) =>\n      this.onMsg(JSON.parse(data) as ApiMsg);\n  }\n\n  private onMsg(msg: ApiMsg) {\n    switch (msg.cmd) {\n      case \"grab\":\n        if (msg.button) {\n          this.waitingOnButton.set(true);\n        } else if (this.sendPhotoFunc.state !== null) {\n          this.sendPhotoFunc.state();\n        } else {\n          const cb = (sendPhoto: (() => void) | null) => {\n            sendPhoto!();\n            this.sendPhotoFunc.deRegister(cb);\n          };\n          this.sendPhotoFunc.onChange(cb);\n        }\n        break;\n\n      case \"imu\":\n        this.send(this.imuDataFrame.state);\n        break;\n\n      case \"disconnect\":\n        this.ws.close();\n        throw new Error(\"Another client device has taken control of websocket\");\n\n      default:\n        throw new Error(`Unhandled Api message ${msg}`);\n    }\n  }\n\n  send(msg: any) {\n    this.ws.send(msg instanceof Blob ? msg : JSON.stringify(msg));\n  }\n}\n\nexport function useApi() {\n  // params: ConstructorParameters<typeof Api> ) {\n  const [api, setApi] = useState<Api | null | Error>(null);\n\n  useEffect(() => {\n    const ws = new WebSocket(Api.WS_URL);\n    ws.onopen = () => setApi(new Api(ws)); //, params));\n    ws.onclose = () => setApi(null);\n    ws.onerror = (e) =>\n      setApi(new Error(`couldn't connect to ws api @ ${Api.WS_URL}`));\n    return ws.close; // effect cleanup handler\n  }, []); //[params]);\n\n  return api;\n}\n","import React, { useEffect, useRef } from \"react\";\nimport uPlot from \"uplot\";\nimport { Observable } from \"./observable\";\nimport unwrap from \"ts-unwrap\";\nimport \"uplot/dist/uPlot.min.css\";\n\nexport type SignalScope = {\n  name: string;\n  styles: string | {} | null;\n  labels: string[] | null;\n  data: Observable<number[][]>;\n\n  // millliseconds of data to retain and display -\n  // prevents memory usage from growing indefinitely\n  keepLastSecs: number;\n};\n\nexport function SignalScopeChart({ scope }: { scope: SignalScope }) {\n  const [data] = scope.data.useState();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const chartRef = useRef<uPlot>();\n\n  // update the chart\n  useEffect(() => {\n    // use the same modern matplotlib default colours\n    const VEGA_CAT_10_COLORS = [\n      \"#1f77b4\",\n      \"#ff7f0e\",\n      \"#2ca02c\",\n      \"#d62728\",\n      \"#9467bd\",\n      \"#8c564b\",\n      \"#e377c2\",\n      \"#7f7f7f\",\n      \"#bcbd22\",\n      \"#17becf\",\n    ];\n\n    const container = containerRef.current;\n    if (chartRef.current) {\n      chartRef.current.setData(data as any);\n      //   console.log(\"setData\", data);\n    } else if (container && !chartRef.current) {\n      const uplot = (chartRef.current = new uPlot(\n        {\n          width: 600,\n          height: 400,\n\n          series: [\n            {},\n            ...(scope.labels ?? []).map((label, i) => ({\n              label,\n              stroke: VEGA_CAT_10_COLORS[i % VEGA_CAT_10_COLORS.length],\n              points: { show: false },\n            })),\n          ],\n\n          axes: [\n            {\n              stroke: \"white\",\n              labelSize: 0,\n              grid: { stroke: \"white\", width: 0.1 },\n              ticks: { show: false, size: 0 },\n              size: 0,\n              values: \"\",\n            },\n            {\n              stroke: \"white\",\n              grid: { stroke: \"white\", width: 0.1 },\n              ticks: { show: false },\n            },\n          ],\n        },\n        data as any, // uPlot.js types incorrect here\n        container\n      ));\n      const parent = unwrap(container.parentElement);\n\n      new ResizeObserver(() => {\n        const LEGEND_HEIGHT = 25;\n        uplot.setSize({\n          width: parent.offsetWidth,\n          height: parent.offsetHeight - LEGEND_HEIGHT,\n        });\n      }).observe(parent);\n    }\n  }, [containerRef, data, scope.labels]);\n\n  return <div ref={containerRef} />;\n}\n","import { useEffect, useRef, useCallback, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Switch from \"react-switch\";\nimport Quaternion from \"quaternion\";\nimport unwrap from \"ts-unwrap\";\nimport \"md-gum-polyfill\"; // get videostream working on more browsers\n\nimport { useApi, Api } from \"./api\";\nimport { SignalScopeChart } from \"./SignalScopeChart\";\n\nconst KEEP_LAST_SECS_IMU_DATA = 5;\n\nfunction MainUI({ api }: { api: Api }) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [\n    waitingForButton,\n    setWaitingForButton,\n  ] = api.waitingOnButton.useState();\n  const [showImuData, setShowImuData] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n\n  const sendPhoto = useCallback(\n    function sendPhoto() {\n      const canvas = unwrap(canvasRef.current);\n      const video = unwrap(videoRef.current);\n      setWaitingForButton(false);\n\n      const w = (canvas.width = video.videoWidth);\n      const h = (canvas.height = video.videoHeight);\n      const ctx = unwrap(canvas.getContext(\"2d\"));\n      ctx.drawImage(video, 0, 0);\n      const img = ctx\n        .getImageData(0, 0, w, h)\n        // discard the alpha channel by skipping every 4th byte\n        .data.filter((_, idx) => idx % 4 !== 3);\n      api.send(new Blob([new Uint16Array([w, h]), img]));\n    },\n    [api, setWaitingForButton]\n  );\n\n  useEffect(() => {\n    const video = unwrap(videoRef.current);\n\n    (async function startLiveStream() {\n      video.srcObject = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            min: 1280,\n            ideal: 1920,\n            max: 2560,\n          },\n\n          height: {\n            min: 720,\n            ideal: 1080,\n            max: 1440,\n          },\n        },\n      });\n    })();\n\n    // wait for the first frame to load before letting api know we're good to send photos\n    video.onloadeddata = () => api.sendPhotoFunc.set(sendPhoto);\n\n    // don't bother with cleanup for now\n  }, [api, sendPhoto]);\n\n  useEffect(() => {\n    (async function setupSensors() {\n      try {\n        const sensors = {\n          accelerometer: Accelerometer,\n          gyroscope: Gyroscope,\n          magnetometer: Magnetometer,\n        };\n\n        for (const [name, SensorClass] of Object.entries(sensors)) {\n          // if the device supports this sensor type\n          if (typeof SensorClass == \"function\") {\n            await navigator.permissions.query({ name: name as PermissionName });\n\n            const sensor = new SensorClass({ frequency: 30 });\n\n            sensor.addEventListener(\"error\", (event) => {\n              // Handle runtime errors.\n              if (event.error.name === \"NotAllowedError\") {\n                // Branch to code for requesting permission.\n              } else if (event.error.name === \"NotReadableError\") {\n                console.error(\"Cannot connect to the sensor.\");\n              } else {\n                api.imuDataFrame.set({\n                  ...api.imuDataFrame.state,\n                  [name]: [sensor.x, sensor.y, sensor.z],\n                });\n              }\n            });\n            sensor.addEventListener(\"reading\", () => {});\n            sensor.start();\n          }\n        }\n      } catch (error) {\n        if (error.name === \"SecurityError\") {\n          // See the note above about feature policy.\n          console.error(\"Sensor construction was blocked by a feature policy.\");\n        } else if (error.name === \"ReferenceError\") {\n          console.error(\"Sensor is not supported by the User Agent.\");\n        } else {\n          throw error;\n        }\n      }\n    })();\n\n    const onDeviceOrientation = ({\n      alpha,\n      beta,\n      gamma,\n    }: DeviceOrientationEvent) => {\n      // append the data\n      const now = Date.now() / 1000;\n      const data = api.imuQuaternionData.state;\n      data[0].push(now);\n      data[1].push(alpha!);\n      data[2].push(beta!);\n      data[3].push(gamma!);\n\n      // only keep scope.keepLastSecs worth of data\n      const [time] = data;\n      const cutoffTime = now - KEEP_LAST_SECS_IMU_DATA;\n      const cutoffIdx = time.findIndex((t) => t >= cutoffTime);\n      if (cutoffIdx > 0) {\n        for (const series of data) {\n          series.splice(0, cutoffIdx);\n        }\n      }\n\n      // Update the rotation object\n      const RAD = Math.PI / 180;\n      const q = Quaternion.fromEuler(\n        unwrap(alpha) * RAD,\n        unwrap(beta) * RAD,\n        unwrap(gamma) * RAD\n      );\n\n      // [OPTIONAL IMPROVEMENT]: Display orientation via a rotating mobile phone image\n      // Set the CSS style to the element you want to rotate\n      // elm.style.transform = \"matrix3d(\" + q.conjugate().toMatrix4() + \")\";\n\n      // update the observable\n      api.imuQuaternionData.set(data.slice());\n      api.imuDataFrame.set({\n        ...api.imuDataFrame.state,\n        quaternion: [q.x, q.y, q.z, q.w],\n      });\n      // api.imuDataFrame.set(quaternion);\n    };\n\n    window.addEventListener(\"deviceorientation\", onDeviceOrientation);\n    return () =>\n      window.removeEventListener(\"deviceorientation\", onDeviceOrientation);\n  }, [api.imuQuaternionData, api.imuDataFrame]);\n\n  return (\n    <div\n      style={{\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"relative\",\n        display: \"flex\",\n      }}\n    >\n      <video\n        ref={videoRef}\n        autoPlay\n        style={{ maxWidth: \"100%\", maxHeight: \"100%\", margin: \"0 auto\" }}\n      />\n      {/* canvas required for screenshot (MediaStreamCapture API not available in most mobile browsers) */}\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\n\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n          height: \"100%\",\n          width: \"100%\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"start\",\n            margin: 20,\n          }}\n        >\n          {showImuData ? (\n            <div\n              style={{\n                height: 100,\n                width: \"100%\",\n                color: \"white\",\n                background: \"#282c34\",\n                borderRadius: 5,\n              }}\n            >\n              <SignalScopeChart\n                scope={{\n                  name: \"Orientation\",\n                  styles: null,\n                  labels: [\"alpha\", \"beta\", \"gamma\"],\n                  data: api.imuQuaternionData,\n                  keepLastSecs: 5,\n                }}\n              />\n              {/* Has some graphical bugs. Leaving here incase it wants to be developed in the future */}\n              {/* <SignalBarChart\n                data={api.imuQuaternionData}\n                labels={[\"alpha\", \"beta\", \"gamma\"]}\n              /> */}\n            </div>\n          ) : null}\n\n          <Button\n            variant=\"outline-light\"\n            style={{\n              borderRadius: 99,\n              height: 60,\n              width: 60,\n              fontSize: 32,\n              margin: 10,\n            }}\n            onClick={() => setShowMenu(true)}\n          >\n            ⋯\n          </Button>\n\n          <Modal show={showMenu} onHide={() => setShowMenu(false)} size=\"lg\">\n            <Modal.Header closeButton>\n              <Modal.Title>Menu</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              <label\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  fontSize: \"1rem\",\n                }}\n              >\n                Show IMU Data?\n                <Switch\n                  onChange={setShowImuData}\n                  checked={showImuData}\n                  height={30}\n                  width={60}\n                />\n              </label>\n            </Modal.Body>\n          </Modal>\n        </div>\n\n        {waitingForButton ? (\n          <Button\n            variant=\"outline-light\"\n            style={{\n              borderRadius: 99,\n              height: 90,\n              width: 90,\n              fontSize: 32,\n              margin: 10,\n              alignSelf: \"center\",\n            }}\n            disabled={!waitingForButton}\n            onClick={sendPhoto}\n          >\n            📷\n          </Button>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  const api = useApi();\n\n  if (api instanceof Error) {\n    throw api; // get handle'd by error boundary in index.tsx\n  }\n\n  return api ? <MainUI api={api} /> : null;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <ErrorBoundary\n    fallbackRender={({ error, resetErrorBoundary }) => (\n      <Alert variant=\"danger\">\n        Something went wrong:\n        {error.toString()}\n        <br />\n        <Alert.Link onClick={resetErrorBoundary}>Try again</Alert.Link>\n      </Alert>\n    )}\n  >\n    <App />\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}